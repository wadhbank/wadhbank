import { useEffect, useState } from "react";
import { Prisma } from "prisma";
import Head from "next/head";
import Image from "next/image";
import { signOut } from "next-auth/client";
import { useRouter } from "next/router";
import { useSession } from "next-auth/client";
import { Col, Row, Menu, Spin } from "antd";
import moment from "moment";
import prisma from "../../lib/prisma";
import {
  IconChevronDown,
  IconChevronLeft,
  IconChevronRight,
  IconFile,
  IconLogout,
  IconMale,
  ImageWadhbank,
} from "../../assets";
import Wrapper, { DropdownMenus, Header, PaginationCustom } from "./style";
import { Table, Button } from "../../components";
import URL from "../../configs/baseUrl";
import { numberFormatter } from "../../utils/commonUtils";

const menu = (props) => {
  const { currentEmail } = props;
  return (
    <Menu className="component_dropdown_menus">
      <Menu.Item key="0" className="component_dropdown_menus_item account">
        <Row gutter={[4, 4]}>
          <Col span={24} className="component_account">
            {currentEmail || ""}
          </Col>
          <Col span={24} className="component_account_role">
            Admin
          </Col>
        </Row>
      </Menu.Item>
      <Menu.Divider />
      <Menu.Item key="1" className="component_dropdown_menus_item links">
        <Row gutter={[4, 4]}>
          <Col
            span={24}
            className="component_link"
            onClick={() => {
              signOut({ redirect: false, callbackUrl: URL.LOGIN });
            }}
          >
            <Row gutter={12} align="middle">
              <Col>
                <IconLogout />
              </Col>
              <Col>Logout</Col>
            </Row>
          </Col>
        </Row>
      </Menu.Item>
    </Menu>
  );
};

export async function getServerSideProps() {
  const users: Prisma.UserUncheckedCreateInput[] = await prisma.user.findMany();
  return {
    props: { initialUsers: users },
  };
}

const pageSize = 50;
const Index = ({ initialUsers }) => {
  const [userList] = useState<Prisma.UserUncheckedCreateInput[]>(initialUsers);
  const router = useRouter();

  const [session, loading] = useSession();
  const [currentPage, setCurrentPage] = useState(0);
  const [excelPackage, setExcelPackage] = useState();
  const currentEmail = session?.user?.email;
  const currentDate = moment()?.format("DD-MMM-YYYY");

  useEffect(() => {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { Excel } = require("antd-table-saveas-excel");
    const excel = new Excel();
    setExcelPackage(excel);
  }, []);

  const isSessionValid = (session) => {
    if (
      typeof session !== typeof undefined &&
      session !== null &&
      typeof session.user !== typeof undefined
    ) {
      return true;
    } else {
      return false;
    }
  };

  if (loading) {
    return <Spin />;
  } else {
    if (!isSessionValid(session)) {
      router.push(URL.LOGIN);
      return null;
    }
  }

  const onGetCurrentShowing = () => {
    const indexOfLast = (currentPage + 1) * pageSize;
    const indexOfFirst = indexOfLast - pageSize;
    const currentData = userList?.slice(indexOfFirst, indexOfLast);
    const startIndex = numberFormatter(currentPage * pageSize + 1);
    const endIndex = numberFormatter(
      currentPage * pageSize + currentData?.length
    );
    return `Showing ${startIndex}-${endIndex} data of ${numberFormatter(
      userList?.length
    )} data`;
  };

  const columns: any = [
    {
      title: "No.",
      dataIndex: "id",
      width: "10%",
      sorter: (a, b) => {
        return a?.id - b?.id;
      },
      sortOrder: "descend",
      sortDirections: [],
      showSorterTooltip: false,
      render: (value) => {
        const selected = userList
          ?.map((item) => {
            return item?.id;
          })
          .indexOf(value);
        return numberFormatter(selected + 1);
      },
    },
    {
      title: "Email",
      dataIndex: "email",
    },
    {
      title: "Full Name",
      dataIndex: "fullName",
    },
    {
      title: "Registered Date",
      dataIndex: "dateCreated",
      render: (record) => {
        return moment(record)?.format("DD MMM YYYY");
      },
    },
  ];

  return (
    <Wrapper>
      <Head>
        <title>Wadhbank - Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header>
        <Row className="container_header">
          <Col
            className="component_logo"
            onClick={() => {
              router.push(URL.DASHBOARD);
            }}
          >
            <Image src={ImageWadhbank} alt="wadhbank" objectFit="cover" />
          </Col>
          <Col className="component_nav">Waiting List</Col>
          <Col className="component_menus">
            <DropdownMenus
              trigger={["click"]}
              overlay={menu({ currentEmail })}
              overlayClassName="component_menus_overlay"
              getPopupContainer={(trigger) => {
                return trigger;
              }}
              placement="bottomRight"
            >
              <Row gutter={8} align="middle">
                <Col>
                  <Image src={IconMale} height={36} width={36} alt="avatar" />
                </Col>
                <Col>
                  <IconChevronDown />
                </Col>
              </Row>
            </DropdownMenus>
          </Col>
        </Row>
      </Header>
      <Col span={24} className="container_waiting_list">
        <Row>
          <Col span={24} className="component_waiting_list_header">
            <Row justify="space-between" align="middle">
              <Col className="component_waiting_list_header_title">
                Waiting List
              </Col>
              <Col className="component_waiting_list_header_export">
                <Button
                  type="default"
                  onClick={() => {
                    if (excelPackage) {
                      // eslint-disable-next-line @typescript-eslint/no-explicit-any
                      (excelPackage as any)
                        .addSheet(`${"wadhbank-waiting-list"}-${Math.random()}`)
                        .addColumns(columns)
                        .addDataSource(userList)
                        .saveAs(`wadhbank-waiting-list-${currentDate}.xlsx`);
                    }
                  }}
                >
                  <Row align="middle" gutter={16}>
                    <Col className="component_waiting_list_header_export_icon">
                      <IconFile />
                    </Col>
                    <Col className="component_waiting_list_header_export_label">
                      Export to excel
                    </Col>
                  </Row>
                </Button>
              </Col>
            </Row>
          </Col>
          <Col span={24} className="component_waiting_list_table">
            <Col span={24} className="component_waiting_list_table_header">
              <Row
                justify="space-between"
                align="middle"
                className="component_waiting_list_table_header_row"
              >
                <Col className="component_waiting_list_table_header_total">
                  Total user on waiting list:&nbsp;
                  <span className="component_total_bold">{`${numberFormatter(
                    userList?.length
                  )} people`}</span>
                </Col>
                {userList?.length !== 0 && (
                  <Col className="component_waiting_list_table_header_pagination">
                    <Row gutter={16} align="middle" wrap={false}>
                      <Col className="component_pagination_showing">
                        {onGetCurrentShowing()}
                      </Col>
                      <Col className="component_pagination_handler">
                        <PaginationCustom
                          current={currentPage + 1}
                          total={userList.length}
                          pageSize={pageSize}
                          onChange={(page) => {
                            setCurrentPage(page - 1);
                          }}
                          itemRender={(_, type, originElement) => {
                            if (type === "prev") {
                              return <IconChevronLeft />;
                            }
                            if (type === "next") {
                              return <IconChevronRight />;
                            }
                            return originElement;
                          }}
                        />
                      </Col>
                    </Row>
                  </Col>
                )}
              </Row>
            </Col>
            <Col span={24} className="component_waiting_list_table_content">
              <Table
                dataSource={userList}
                columns={columns}
                className="hide-sort"
                rowKey="id"
                pagination={{
                  pageSize,
                  style: { display: "none" },
                  current: currentPage + 1,
                }}
              />
            </Col>
          </Col>
        </Row>
      </Col>
    </Wrapper>
  );
};

export default Index;
